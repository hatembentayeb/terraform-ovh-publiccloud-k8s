#!/bin/bash

# kubeadm-init-lock runs kubeadm init/join
# on the master nodes and store creds into ETCD

set -eo pipefail

if [ "$MASTER_MODE" != "1" ]; then
    echo "not a master. should not be called" >&2
    exit 1
fi

# required as kubeadm will make use of binaries such as kubelet
export PATH=$PATH:/opt/k8s/bin

# Prepare etcdctl command
export ETCDCTL_API=3
ETCDCTL_COMMAND="/opt/k8s/bin/etcdctl --cacert $ETCD_CA_FILE --cert $ETCD_CERT_FILE --key $ETCD_KEY_FILE --endpoints $ETCD_ENDPOINTS"

if [ -z "$BOOTSTRAP_TOKEN" ]; then
    TOKEN=$($ETCDCTL_COMMAND get --print-value-only $BOOTSTRAP_TOKEN_ETCD_KEY)
else
    TOKEN="$BOOTSTRAP_TOKEN"
fi

if [ -z "$CERTIFICATE_KEY" ]; then
    CERTIFICATE_KEY=$($ETCDCTL_COMMAND get --print-value-only $CERTIFICATE_KEY_ETCD_KEY)
else
    CERTIFICATE_KEY="$CERTIFICATE_KEY"
fi

if [ -z "$CACRT_SHA256SUM" ]; then
    CACRT_SHA256SUM=$($ETCDCTL_COMMAND get --print-value-only $CACRT_SHA256SUM_ETCD_KEY)
else
    CACRT_SHA256SUM="$CACRT_SHA256SUM"
fi

if [ -z "$CERTIFICATE_KEY" ] || [ -z "$TOKEN" ] || [ -z "$CACRT_SHA256SUM" ]; then
    master_keys=missing
else
    master_keys=present
fi

if [ "$master_keys" == "missing" ]; then
    # we need to generate the init kube and store join creds into etcd
    echo "primary master. kubeadm init" >&2

    tmpkubeadm=$(mktemp)
    trap "rm -f $tmpkubeadm" EXIT

    echo "Generating certificate key." >&2
    cert_key=$(sudo openssl rand -hex 32)

    # kubeadm init
    /opt/k8s/bin/kubeadm_config.yaml.sh > "$tmpkubeadm"
    if ! /opt/k8s/bin/kubeadm init \
         --config="$tmpkubeadm" \
         --experimental-upload-certs \
         --certificate-key "$cert_key"\
         --skip-certificate-key-print \
         --skip-token-print; then
        echo "primary master kubeadm init failed." >&2
        exit 1
    fi

    echo "Putting token into etcd." >&2
    # tokens are valid 24h. if scaling worker nodes after this delay
    # dont forget to regenerate a valid token before
    $ETCDCTL_COMMAND put $BOOTSTRAP_TOKEN_ETCD_KEY "$(/opt/k8s/bin/kubeadm token list | tail -n1 | awk '{print $1}')"
    echo "Putting cacrt sha256sum into etcd." >&2
    cacrtsum=$(openssl x509 -in /etc/kubernetes/pki/ca.crt -noout -pubkey | openssl rsa -pubin -outform DER 2>/dev/null | sha256sum | cut -d' ' -f1)
    $ETCDCTL_COMMAND put "$CACRT_SHA256SUM_ETCD_KEY" "sha256:$cacrtsum"

    echo "Putting certificate key into etcd." >&2
    $ETCDCTL_COMMAND put "$CERTIFICATE_KEY_ETCD_KEY" "${cert_key}"

else
    if [ -z "$API_ENDPOINT" ]; then
        masterip=$($ETCDCTL_COMMAND get --prefix "$MASTERS_ETCD_KEYPREFIX" \
                                          --print-value-only --limit 1)
        if [ -z "$masterip" ]; then
            echo "ERROR: no master ip registered and no API_ENDPOINT defined" >&2
            exit 1
        fi
        JOIN="${masterip}:6443"
    else
        JOIN="$API_ENDPOINT"
    fi

    # Join the cluster
    echo "Joining the cluster as master on endpoint $API_ENDPOINT" >&2
        #   kubeadm join 192.168.0.200:6443 \
            # --token 9vr73a.a8uxyaju799qwdjv \
            # --discovery-token-ca-cert-hash sha256:7c2e69131a36ae2a042a339b33381c6d0d43887e2de83720eff5359e26aec866 \
            # --experimental-control-plane \
            # --certificate-key f8902e114ef118304e561c3ecd4d0b543adc226b7a07f675f56564185ffe0c07

    /opt/k8s/bin/kubeadm join \
                         --discovery-token-ca-cert-hash "$CACRT_SHA256SUM" \
                         --token "$TOKEN" \
                         --experimental-control-plane \
                         --certificate-key "${CERTIFICATE_KEY}" \
                         "$JOIN"
fi
