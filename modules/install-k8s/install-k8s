#!/bin/bash
# This script can be used to install Kubernetes binaries and its dependencies.
# This script has been tested with the CentOS 7/CoreOS/Ubuntu operating systems.
set -e

readonly DEFAULT_INSTALL_PATH="/opt/k8s"

readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly SCRIPT_NAME="$(basename "$0")"

readonly DEFAULT_K8S_VERSION="1.14.0"
readonly DEFAULT_CALICO_NODE_VERSION="3.6.1"
readonly DEFAULT_CALICO_CNI_VERSION="3.6.1"
readonly DEFAULT_FLANNEL_VERSION="0.11.0"
readonly DEFAULT_ETCD_VERSION="3.3.12"
readonly DEFAULT_CRICTL_VERSION="1.14.0"
readonly DEFAULT_K8S_CNI_PLUGINS_VERSION="0.7.5"
readonly DEFAULT_K8S_SHA1SUM_CNI_PLUGINS="52e9d2de8a5f927307d9397308735658ee44ab8d"
readonly DEFAULT_K8S_SHA1SUM_KUBELET="c3b736fd0f003765c12d99f2c995a8369e6241f4"
readonly DEFAULT_K8S_SHA1SUM_KUBECTL="7e3a3ea663153f900cbd52900a39c91fa9f334be"
readonly DEFAULT_K8S_SHA1SUM_KUBEADM="774a2660a841c7a01a6b28aa914aee93eed021c4"
readonly DEFAULT_SHA256SUM_ETCD="dc5d82df095dae0a2970e4d870b6929590689dd707ae3d33e7b86da0f7f211b6"
readonly DEFAULT_SHA1SUM_CRICTL="425d2b713cce726e3beecf9b3002111ffa06b6cb"
readonly DEFAULT_DOCKER_VERSION="18.09"


function print_usage {
  echo
  echo "Usage: install-k8s [OPTIONS]"
  echo
  echo "This script can be used to install Kubernetes and its dependencies. This script has been tested with CentOS 7."
  echo
  echo "Options:"
  echo
  echo -e "  --k8s-version\t\tThe version of Kubernetes to install. Required."
  echo -e "  --calico-node-version\t\tThe version of Calico node docker image to install. Required."
  echo -e "  --calico-cni-version\t\tThe version of Calico CNI docker image to install. Required."
  echo -e "  --flannel-version\t\tThe version of Flannel docker image to install. Required."
  echo -e "  --cni-plugins-version\t\tThe version of cni plugins to install. Required."
  echo -e "  --sha1sum-cni-plugins\t\tThe sha1 checksum of the cni plugins release. Required."
  echo -e "  --sha1sum-kubelet\t\tThe sha1 checksum of the Kubernetes binary. Required."
  echo -e "  --sha1sum-kubectl\t\tThe sha1 checksum of the Kubernetes binary. Required."
  echo
  echo "Example:"
  echo
  echo "  install-k8s --version 3.3.0 --cni-plugins-version 0.7.0"
}

function log {
  local readonly level="$1"
  local readonly message="$2"
  local readonly timestamp=$(date +"%Y-%m-%d %H:%M:%S")
  >&2 echo -e "${timestamp} [${level}] [$SCRIPT_NAME] ${message}"
}

function log_info {
  local readonly message="$1"
  log "INFO" "$message"
}

function log_warn {
  local readonly message="$1"
  log "WARN" "$message"
}

function log_error {
  local readonly message="$1"
  log "ERROR" "$message"
}

function assert_not_empty {
  local readonly arg_name="$1"
  local readonly arg_value="$2"

  if [[ -z "$arg_value" ]]; then
    log_error "The value for '$arg_name' cannot be empty"
    print_usage
    exit 1
  fi
}

function install_dependencies {
  log_info "Installing dependencies"
  if [ -n "$(command -v yum)" ]; then
      # curl to download or interact with apis,
      # docker to run kubernetes infra # Not tested
      sudo yum install -y \
           socat \
           systemd-networkd \
           systemd-resolved \
           ebtables \
           rng-tools

      export VERSION=${DEFAULT_DOCKER_VERSION} && curl -sSL get.docker.com | sudo -E sh
      sudo usermod -aG docker centos
  elif [ -n "$(command -v apt-get)" ] && [ -n "$(command -v ubuntu-bug)" ]; then
      log_info "Ubuntu based. upgrading system and installing docker"
      echo "Debian based. upgrading system." >&2
      export DEBIAN_FRONTEND=noninteractive
      sudo -E apt update -y -q
      sudo -E apt install --no-install-recommends -q -y \
           jq \
           socat \
           ebtables \
           rng-tools

      export VERSION=${DEFAULT_DOCKER_VERSION} && curl -sSL get.docker.com | sudo -E sh
      sudo usermod -aG docker ubuntu
  elif [ -n "$(command -v coreos-install)" ]; then
      log_info "Nothing to do for coreos"
  else
      log_error "Could not find yum. Cannot install dependencies on this OS."
      exit 1
  fi

  # Setup daemon.
  sudo mkdir /etc/docker
  sudo tee /etc/docker/daemon.json <<EOF
{
  "exec-opts": ["native.cgroupdriver=systemd"],
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "100m"
  },
  "storage-driver": "overlay2"
}
EOF
  sudo mkdir -p /etc/systemd/system/docker.service.d
  sudo systemctl restart docker
}

function create_k8s_install_paths {
  local readonly path="$1"
  log_info "Creating install dirs for Kubernetes at $path"
  sudo mkdir -p "$path/bin"
  sudo echo "export PATH=\$PATH:$path/bin"  | sudo tee /etc/profile.d/k8s_path.sh > /dev/null
  sudo chmod +x /etc/profile.d/k8s_path.sh
  for i in kubeadm-init \
               kubeadm-init-lock \
               regenerate-bootstrap-token \
               postsetup \
               postsetup-lock \
               etcd-get-certs \
               kubeadm_config.yaml.sh \
               cni-manifest.yaml.sh; do
      sudo cp "$SCRIPT_DIR/${i}" "$path/bin"
      sudo chmod +x "$path/bin/${i}"
  done
}

function check_sha1sum {
  local readonly path="$1"
  local readonly "sha1sum"="$2"
  local readonly computed_sha1sum=$(sha1sum "$path" | awk '{print $1}')

  if [ "$sha1sum" != "$computed_sha1sum" ]; then
    log_error "dl binary checksum error for path $path: $sha1sum != $computed_sha1sum"
    exit 1b
  fi
}

function install_cni_plugins {
  local readonly version="$1"
  local readonly sha1sum="$2"
  local readonly archive_name="cni-plugins-amd64-v${version}.tgz"
  local readonly url="https://github.com/containernetworking/plugins/releases/download/v${version}/${archive_name}"
  local readonly cni_dir="/opt/cni/bin"
  local readonly full_name="$cni_dir/$archive_name"

  log_info "Installing cni plugins at version ${version}"
  sudo mkdir -p $cni_dir
  sudo curl --silent --fail -L -o $full_name "$url"
  check_sha1sum "$full_name" "$sha1sum"
  sudo tar xz -C $cni_dir -f $full_name
  sudo rm "$full_name"
}

function install_binary {
  local readonly bin_name="$1"
  local readonly version="$2"
  local readonly sha1sum="$3"
  local readonly path="$4"

  local readonly url="https://storage.googleapis.com/kubernetes-release/release/v${version}/bin/linux/amd64/${bin_name}"
  local readonly download_path="$path/bin/${bin_name}"

  log_info "Downloading ${bin_name} $version from $url to $download_path"
  sudo curl --silent --fail -L -o "$download_path" "$url"
  check_sha1sum "$download_path" "$sha1sum"
  sudo chmod +x "$download_path"
  sudo mkdir -p /opt/bin
  sudo ln -fs "${download_path}" /opt/bin/
}

function install_etcdctl {
  local readonly version="$1"
  local readonly sha256sum="$2"
  local readonly path="$3"

  local readonly url="https://github.com/coreos/etcd/releases/download/v${version}/etcd-v${version}-linux-amd64.tar.gz"
  local readonly download_path="/tmp/etcd-v${version}-linux_amd64.tar.gz"
  local readonly bin_dir="$path/bin"

  log_info "Downloading Etcd $version from $url to $download_path"
  curl -L -o "$download_path" "$url"
  if [ "$sha256sum" != "$(sha256sum "$download_path" | awk '{print $1}')" ]; then
      log_error "dl binary checksum error $sha256sum != $(sha256sum "$download_path" | awk '{print $1}')"
      exit 1
  else
      log_info "Extracting etcdctl binaries to $bin_dir/"
      sudo tar -xzf "${download_path}" --strip=1 -C "${bin_dir}" "etcd-v${version}-linux-amd64"/etcdctl
  fi

  sudo chmod a+x "$bin_dir/etcdctl"
}

function install_crictl {
    local readonly version="$1"
    local readonly sha1sum="$2"
    local readonly path="$3"

    local readonly url="https://github.com/kubernetes-sigs/cri-tools/releases/download/v${version}/crictl-v${version}-linux-amd64.tar.gz"
    local readonly download_path="/tmp/crictl-v${version}-linux_amd64.tar.gz"
    local readonly bin_dir="$path/bin"

    log_info "Downloading crictl $version from $url to $download_path"
    curl -L -o "$download_path" "$url"
    if [ "$sha1sum" != "$(sha1sum "$download_path" | awk '{print $1}')" ]; then
        log_error "dl binary checksum error $sha1sum != $(sha1sum "$download_path" | awk '{print $1}')"
        exit 1
    else
        log_info "Extracting crictl binaries to $bin_dir/"
        sudo tar -xzf "${download_path}" -C "${bin_dir}" crictl
    fi

    sudo chmod a+x "$bin_dir/crictl"
}


function pull_needed_image(){
    local readonly k8s_version="$1"
    local readonly calico_node_version="$2"
    local readonly calico_cni_version="$3"
    local readonly flannel_version="$4"

    # docker pull are silent to avoid log pollution in CI builds

    # Control plane
    sudo /opt/k8s/bin/kubeadm config images pull --kubernetes-version "v${k8s_version}"

    # CNI
    sudo docker pull "quay.io/calico/node:v${calico_node_version}"
    sudo docker pull "quay.io/calico/cni:v${calico_cni_version}"
    sudo docker pull "quay.io/coreos/flannel:v${flannel_version}"

}

function setup_systemd {
    local readonly username="$1"
    sudo cp "$SCRIPT_DIR/kubelet.service" "/etc/systemd/system/"
    sudo cp "$SCRIPT_DIR/customruncmd.service" "/etc/systemd/system/"
    sudo cp "$SCRIPT_DIR/k8s-init.service" "/etc/systemd/system/"
    sudo cp "$SCRIPT_DIR/regenerate-bootstrap-token.service" "/etc/systemd/system/"
    sudo cp "$SCRIPT_DIR/10-eth0.network" "/etc/systemd/network/"

    if systemctl list-unit-files --all | grep -q networking.service; then
        sudo systemctl disable networking
        sudo systemctl mask networking ifup@ens3.service ifup@eth0.service
    fi

    if systemctl list-unit-files --all | grep -q network.service; then
        sudo systemctl disable network NetworkManager
        sudo systemctl mask network NetworkManager
    fi

    sudo systemctl start systemd-resolved
    sudo rm -f /etc/resolv.conf
    sudo ln -s /run/systemd/resolve/resolv.conf /etc/resolv.conf

    sudo systemctl enable docker.service systemd-resolved systemd-networkd

    if [ -n "$(command -v apt-get)" ] && [ -n "$(command -v ubuntu-bug)" ]; then
        sudo sed -i -e s/%AFTER%/cloud-init.target/g "/etc/systemd/system/k8s-init.service"
        sudo sed -i -e s/%WANTS%/cloud-init.target/g "/etc/systemd/system/kubelet.service"
        sudo sed -i -e s/%AFTER%/cloud-init.target/g "/etc/systemd/system/customruncmd.service"
        sudo systemctl add-wants cloud-init.target k8s-init.service customruncmd.service
    else
        sudo sed -i -e s/%AFTER%/multi-user.target/g "/etc/systemd/system/k8s-init.service"
        sudo sed -i -e s/%WANTS%/multi-user.target/g "/etc/systemd/system/kubelet.service"
        sudo sed -i -e s/%AFTER%/multi-user.target/g "/etc/systemd/system/customruncmd.service"
        sudo systemctl add-wants multi-user.target k8s-init.service customruncmd.service
    fi

    sudo systemctl enable kubelet.service

    # disable firewalld. TODO: make a proper setup for etcd
    if systemctl list-unit-files --all | grep -q firewalld.service; then
        sudo systemctl stop firewalld
        sudo systemctl mask firewalld
    fi

    # disable coreos cl auto update
    if systemctl list-unit-files --all | grep -q update-engine.service; then
        sudo systemctl stop update-engine.service locksmithd.service
        sudo systemctl mask update-engine.service locksmithd.service
    fi
}

function install {
  local k8s_version=$DEFAULT_K8S_VERSION
  local calico_node_version=$DEFAULT_CALICO_NODE_VERSION
  local calico_cni_version=$DEFAULT_CALICO_CNI_VERSION
  local flannel_version=$DEFAULT_FLANNEL_VERSION
  local cni_plugins_version=$DEFAULT_K8S_CNI_PLUGINS_VERSION
  local sha1sum_cni_plugins=$DEFAULT_K8S_SHA1SUM_CNI_PLUGINS
  local sha1sum_kubelet=$DEFAULT_K8S_SHA1SUM_KUBELET
  local sha1sum_kubectl=$DEFAULT_K8S_SHA1SUM_KUBECTL
  local sha1sum_kubeadm=$DEFAULT_K8S_SHA1SUM_KUBEADM
  local etcd_version=$DEFAULT_ETCD_VERSION
  local sha256sum_etcd=$DEFAULT_SHA256SUM_ETCD
  local crictl_version=$DEFAULT_CRICTL_VERSION
  local sha1sum_crictl=$DEFAULT_SHA1SUM_CRICTL

  while [[ $# > 0 ]]; do
    local key="$1"

    case "$key" in
      --k8s-version)
        k8s_version="$2"
        shift
        ;;
      --calico-node-version)
        calico_node_version="$2"
        shift
        ;;
      --calico-cni-version)
        calico_cni_version="$2"
        shift
        ;;
      --flannel-version)
        flannel_version="$2"
        shift
        ;;
      --cni-plugins-version)
        cni_plugins_version="$2"
        shift
        ;;
      --sha1sum-cni-plugins)
        sha1sum_cni_plugins="$2"
        shift
        ;;
      --sha1sum-kubectl)
        sha1sum_kubectl="$2"
        shift
        ;;
      --sha1sum-kubelet)
        sha1sum_kubelet="$2"
        shift
        ;;
      --sha1sum-kubeadm)
          sha1sum_kubeadm="$2"
          shift
          ;;
      --etcd-version)
          etcd_version="$2"
          shift
          ;;
      --sha256sum-etcd)
        sha256sum_etcd="$2"
        shift
        ;;
      --crictl-version)
          crictl_version="$2"
          shift
          ;;
      --sha1sum-crictl)
          sha1sum_crictl="$2"
          shift
          ;;
      --help)
        print_usage
        exit
        ;;
      *)
        log_error "Unrecognized argument: $key"
        print_usage
        exit 1
        ;;
    esac

    shift
  done

  assert_not_empty "--k8s-version" "$k8s_version"
  assert_not_empty "--calico-node-version" "$calico_node_version"
  assert_not_empty "--calico-cni-version" "$calico_cni_version"
  assert_not_empty "--flannel-version" "$flannel_version"
  assert_not_empty "--cni-plugins-version" "$cni_plugins_version"
  assert_not_empty "--sha1sum-cni-plugins" "$sha1sum_cni_plugins"
  assert_not_empty "--sha1sum-kubectl" "$sha1sum_kubectl"
  assert_not_empty "--sha1sum-kubelet" "$sha1sum_kubelet"
  assert_not_empty "--sha1sum-kubeadm" "$sha1sum_kubeadm"

  log_info "Starting Kubernetes install"

  install_dependencies
  create_k8s_install_paths "$DEFAULT_INSTALL_PATH"
  install_cni_plugins "$cni_plugins_version" "$sha1sum_cni_plugins"
  install_binary kubectl "$k8s_version" "$sha1sum_kubectl" "$DEFAULT_INSTALL_PATH"
  install_binary kubelet "$k8s_version" "$sha1sum_kubelet" "$DEFAULT_INSTALL_PATH"
  install_binary kubeadm "$k8s_version" "$sha1sum_kubeadm" "$DEFAULT_INSTALL_PATH"
  install_etcdctl "$etcd_version" "$sha256sum_etcd" "$DEFAULT_INSTALL_PATH"
  install_crictl "$crictl_version" "$sha1sum_crictl" "$DEFAULT_INSTALL_PATH"

  pull_needed_image "$k8s_version" "$calico_node_version" "$calico_cni_version" "$flannel_version" > /dev/null 2>&1
  setup_systemd

  log_info "Kubernetes install complete!"
}

install "$@"
