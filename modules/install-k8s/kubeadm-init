#!/bin/bash

# kubeadm-init runs kubeadm init/join on masters or workers
# its based on tokens/pkis either given as env vars or registered in ETCD

set -eo pipefail

if [ "$MASTER_MODE" != "1" ] && [ "$WORKER_MODE" != "1" ]; then
    echo "nothing to be done" >&2
    exit 0
fi

# Do not run if init has already been done
if [ -f /opt/k8s/kubeadm-init.done ]; then
    echo "init already done." >&2
    exit 0
fi

echo "Ensures kubelet is not running as it will be restarted by kubeadm" >&2
systemctl stop kubelet

# required as kubeadm will make use of binaries such as kubelet
export PATH=$PATH:/opt/k8s/bin

echo "Cleanup kubeadm files from a previous init" >&2
suffix="$(date '+%s').bak"
for i in "${POD_MANIFEST_PATH}" \
             /etc/kubernetes/kubelet.conf \
             /etc/kubernetes/pki \
             /etc/kubernetes/bootstrap-kubelet.conf; do
    if [ -f "$i" ] || [ -d "$i" ]; then
        mv -v -- "${i}" "${i}-${suffix}"
    fi
done

# Create manifests path
if [ ! -d "${POD_MANIFEST_PATH}" ]; then
    mkdir -p "${POD_MANIFEST_PATH}"
fi

# Prepare etcdctl command
export ETCDCTL_API=3
ETCDCTL_COMMAND="/opt/k8s/bin/etcdctl --cacert $ETCD_CA_FILE --cert $ETCD_CERT_FILE --key $ETCD_KEY_FILE --endpoints $ETCD_ENDPOINTS"

# Acquire lock on kubeadm-init script if initializing a new master
# Otherwise, run the script without locking
if [ "$MASTER_MODE" == "1" ]; then
    echo "initializing master mode" >&2
    # run kubeadm on master nodes with a lock as the first node will gen
    # the cluster pki certs
    if [ -z "$INIT_ETCD_LOCK" ]; then
        echo "lock var is undefined. cannot proceed" >&2
        exit 1
    fi

    echo "acquiring lock $INIT_ETCD_LOCK" >&2
    $ETCDCTL_COMMAND lock "$INIT_ETCD_LOCK" /opt/k8s/bin/kubeadm-init-lock
    echo "kubeadm init done, lock $INIT_ETCD_LOCK released" >&2
else
    if [ -z "$API_ENDPOINT" ]; then
        masterip=$($ETCDCTL_COMMAND get --prefix "$MASTERS_ETCD_KEYPREFIX" \
                                          --print-value-only --limit 1)
        if [ -z "$masterip" ]; then
            echo "ERROR: no master ip registered and no API_ENDPOINT defined" >&2
            exit 1
        fi
        JOIN="${masterip}:6443"
    else
        JOIN="$API_ENDPOINT"
    fi

    if [ -z "$CACRT_SHA256SUM" ]; then
        CACRT_SHA256SUM=$($ETCDCTL_COMMAND get \
                                 --print-value-only "$CACRT_SHA256SUM_ETCD_KEY")
    else
        CACRT_SHA256SUM="$CACRT_SHA256SUM"
    fi

    if [ -z "$BOOTSTRAP_TOKEN" ]; then
        TOKEN=$($ETCDCTL_COMMAND get \
                                 --print-value-only "$BOOTSTRAP_TOKEN_ETCD_KEY")
    else
        TOKEN="$BOOTSTRAP_TOKEN"
    fi

    echo "Joining the cluster as worker on endpoint $JOIN" >&2
    # kubeadm join 192.168.0.200:6443 \
        # --token 9vr73a.a8uxyaju799qwdjv \
        # --discovery-token-ca-cert-hash sha256:7c2e69131a36ae2a042a339b33381c6d0d43887e2de83720eff5359e26aec866

    /opt/k8s/bin/kubeadm join \
                         --discovery-token-ca-cert-hash "$CACRT_SHA256SUM" \
                         --token "$TOKEN" \
                         "$JOIN"
fi
